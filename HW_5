Реализуйте структуру телефонной книги с помощью HashMap, учитывая, что один человек может иметь несколько телефонов.

package Lesson5;

import java.util.HashMap;
import java.util.List;

public class hw_5_1 {
    public static HashMap<String, List<String>> phonesNames = new HashMap<>();

    public static void main(String[] args) {
        phoneList();
        searchPhoneList("Петров");
    }

    public static void phoneList() {
        phonesNames.put("Петрова", List.of("+7(916)999-99-99", "+7(495)999-99-99"));
        phonesNames.put("Петров", List.of("+7(905)888-88-88", "+7(495)888-88-88"));
        phonesNames.put("Иванова",List.of("+7(907)777-77-77", "+7(495)777-77-77"));

    }

    public static void searchPhoneList(String surname) {
        System.out.printf("%s: %s", surname, phonesNames.get(surname));
    }
}
    

Пусть дан список сотрудников: Иван, Пётр, Антон и так далее. Написать программу, которая найдет и выведет повторяющиеся имена с количеством повторений. Отсортировать по убыванию популярности.

package Lesson5;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.Random;

public class hw_5_2_11 {

    public static String[] getNames() {

        String[] names = {"Петр","Антон","Иван","Даниил"};
        String[] students = new String[30];
        for(int i = 0; i<students.length;i++){
            Random rand = new Random();
            int m1 = rand.nextInt(4);
            students[i] = names[m1];
        }
        for(int i = 0; i<students.length;i++){
            System.out.println(students[i]);}
        return students;
    }
    /**
     * @param args
     */
    public static void main(String[] args) {
        String[] students = getNames();
        Map<String,Integer> countNames = new HashMap<String,Integer>(); 
        for(int i = 0; i<students.length;i++){
            if(countNames.containsKey(students[i])){
                int n = countNames.get(students[i]);
                countNames.put(students[i],n+1);
            } 
            else{
                countNames.put(students[i], 1);
            }
            
        }
        System.out.println();
        for(Map.Entry<String,Integer> el:countNames.entrySet()){
            System.out.println(el.getKey() + " " + el.getValue());}

        ArrayList<String> strings = new ArrayList<>();
        ArrayList<Integer> integers = new ArrayList<>();
        int j = 0;
        ArrayList<Integer> numbers = new ArrayList<>();
        
        for(HashMap.Entry<String, Integer> e:countNames.entrySet()){
            integers.add(e.getValue());
            strings.add(e.getKey());
            numbers.add(j);
            j++;
        }

        boolean isSorted = false;
        int temp = 0;
        while(!isSorted) {
            isSorted = true;
            for (int i = 0; i < integers.size()-1; i++) {
                if(integers.get(numbers.get(i)) < integers.get(numbers.get(i+1))){
                    isSorted = false;
 
                    temp = numbers.get(i);
                    numbers.set(i,numbers.get(i+1));
                    numbers.set(i+1,temp);
                }
            }
        }
        System.out.println();
        for(int i = 0; i<strings.size();i++){
            
            System.out.println(strings.get(numbers.get(i)) + " " + integers.get(numbers.get(i)));}
        }

        }
        

Реализовать алгоритм пирамидальной сортировки (HeapSort).

package Lesson5;

public class hw_5_3 {
    public void sort(int arr[]) {
        int n = arr.length;

        for (int i = n / 2 - 1; i >= 0; i--)
            heapify(arr, n, i);

        for (int i = n - 1; i >= 0; i--) {
            int temp = arr[0];
            arr[0] = arr[i];
            arr[i] = temp;

            heapify(arr, i, 0);
        }
    }

    void heapify(int arr[], int n, int i) {
        int largest = i; 
        int l = 2 * i + 1; 
        int r = 2 * i + 2; 

        if (l < n && arr[l] > arr[largest])
            largest = l;

        if (r < n && arr[r] > arr[largest])
            largest = r;
        if (largest != i) {
            int swap = arr[i];
            arr[i] = arr[largest];
            arr[largest] = swap;

            heapify(arr, n, largest);
        }
    }

    static void printArray(int arr[]) {
        int n = arr.length;
        for (int i = 0; i < n; ++i)
            System.out.print(arr[i] + " ");
        System.out.println();
    }

    public static void main(String args[]) {
        int arr[] = { 12, 11, 13, 5, 6, 7 };
        int n = arr.length;

        hw_5_3 ob = new hw_5_3();
        ob.sort(arr);

        System.out.println(n);

        System.out.println("Sorted array is");
        printArray(arr);
    }
    
}

    

